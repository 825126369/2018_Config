sed命令基本用法
 
sed是一个非交互式文本编辑器，它可对文本文件和标准输入进行编辑，标准输入可以是来自键盘输入、文本重定向、字符串、变量，甚至来自于管道的文本。sed从文本的一个文本行或标准输入中读取数据，将其复制到缓冲区，然后读取命令行或脚本的第一个命令，对此命令要求的行号进行编辑，重复此过程，直到命令行或脚本中的所有命令都执行完毕。相对于诸如vi等其他文本编辑器，sed可以一次性处理所有的编辑任务。
 
sed适用于以下三种场合：
 
        编辑相对交互式文本编辑器而言太大的文件。
 
        编辑命令太复杂，在交互式文本编辑器中难以输入的情况。
 
        对文件扫描一遍，但是需要执行多个编辑函数的情况。
 
 
 
sed只是对缓冲区中原始文件的副本进行编辑，并不编辑原始的文件。因此，如果需要保存改动内容，需要将输入重定向到另一个文件，其格式为：sed 'sed命令' input-file > result-file
 
该命令将sed命令对input-file的更改保存到result-file中。sed编辑命令中的w选项也可将结果保存到某文件中。
 
调用sed有三种方式，一种为Shell命令行方式，另外两种是将sed命令写入脚本文件，然后执行该脚本文件。这三种方式的命令格式为：
 
1、在Shell命令行输入命令调用sed，格式为： sed [选项] 'sed命令' 输入文件    *注意，需要用单引号将sed命令引起来。
 
2、将sed命令插入脚本文件后，然后通过sed命令调用它，格式为：sed[选项] -f sed脚本文件输入文件
 
3、将sed命令插入脚本文件后，最常用的方法是设置该脚本文件为可执行，然后直接执行该脚本，格式为：./sed脚本文件输入文件
 
第3种方式的sed脚本文件与第2种有所不同，其sed脚本文件需要以sha-bang(#!)符号开头，sha-bang后面是解析这个脚本的程序名。不管是哪一种调用方式，如果没有指定输入文件，sed将从标准输入中接受输入。
 
sed命令选项及其意义：
 
-n              #不打印所有行到标准输入
 
-e              #表示将下一个字符串解析为sed编辑命令，如果只传递一个编辑命令给sed，-e选项可以省略
 
-f              #表示正在调用sed脚本文件
 
 
 
sed命令通常由定位文本行和sed编辑命令两部分组成，sed编辑命令对定位文本行进行各种处理，sed提供以下两种方式定位文本：
 
        使用行号，指定一行，或者定行号范围。
 
        使用正则表达式。
 
 
 
sed命令定位文本的方法：
 
x                                #x为指定行号
 
x,y                              #指定从x到y的行号范围
 
/pattern/                        #查询包含模式的行
 
/pattern/pattern/                #查询包含两个模式的行
 
/pattern/,x                      #从与pattern的匹配行到x号行之间的行
 
x,/pattern/                      #从x号行到与pattern的匹配行之间的行
 
x,y!                              #查询不包括x和y行号的行
 
 
 
sed编辑命令：
 
p                #打印匹配行
 
=                #打印文件行号
 
a\              #在定位行号之后追加文本信息
 
i\              #在定位行号之前插入文本信息
 
d                #删除定位行
 
c\              #用新文本替换定位文本
 
s                #使用替换模式替换相应模式
 
r                #从另一个文件中读文件
 
w                #将文本写入到一个文件
 
y                #变换字符
 
q                #第一个模式匹配完成后退出
 
l                #显示与八进制ASCII码等价的控制字符
 
{}              #在定位行执行的命令组
 
n                #读取下一个输入行，用下一个命令处理新的行
 
h                #将模式缓冲区的文本复制到保持缓冲区
 
H                #将模式缓冲区的文本追加到保持缓冲区
 
x                #互换模式缓冲区和保持缓冲区的内容
 
g                #将保持缓冲区的内容复制到模式缓冲区
 
G                #将保持缓冲区的内容追加到模式缓冲区linux
